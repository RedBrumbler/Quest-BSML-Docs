{
    "tags": [
        {
            "name": "action-button",
            "aliases": [
                "action-button",
                "primary-button"
            ],
            "components": [
                "UnityEngine.UI.Button",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform",
                "UnityEngine.UI.Selectable",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "A copy of the shiny play button",
            "since": ""
        },
        {
            "name": "background",
            "aliases": [
                "background",
                "bg",
                "div"
            ],
            "components": [
                "BSML.Backgroundable",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.RectTransform"
            ],
            "description": "A Generic container",
            "since": ""
        },
        {
            "name": "toggle-setting",
            "aliases": [
                "toggle-setting",
                "bool-setting",
                "checkbox-setting",
                "checkbox"
            ],
            "components": [
                "BSML.BaseSetting",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Toggle a boolean on and off",
            "since": ""
        },
        {
            "name": "bsml",
            "aliases": [
                "bsml"
            ],
            "components": [],
            "description": "Generic, Transparent tag",
            "since": ""
        },
        {
            "name": "button",
            "aliases": [
                "button"
            ],
            "components": [
                "UnityEngine.UI.Button",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform",
                "UnityEngine.UI.Selectable",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Create a button",
            "since": ""
        },
        {
            "name": "button-with-icon",
            "aliases": [
                "button-with-icon",
                "icon-button"
            ],
            "components": [
                "UnityEngine.UI.Button",
                "BSML.ButtonIconImage",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform",
                "UnityEngine.UI.Selectable"
            ],
            "description": "Create a button with an icon",
            "since": ""
        },
        {
            "name": "clickable-image",
            "aliases": [
                "clickable-image",
                "clickable-img"
            ],
            "components": [
                "BSML.ClickableImage",
                "UnityEngine.UI.Image",
                "HMUI.ImageView",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform"
            ],
            "description": "Create an image you can click",
            "since": ""
        },
        {
            "name": "clickable-text",
            "aliases": [
                "clickable-text"
            ],
            "components": [
                "BSML.ClickableText",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Create some text you can click",
            "since": ""
        },
        {
            "name": "color-setting",
            "aliases": [
                "color-setting"
            ],
            "components": [
                "BSML.BaseSetting",
                "UnityEngine.UI.Image",
                "HMUI.ImageView",
                "UnityEngine.UI.LayoutElement",
                "BSML.ModalColorPicker",
                "UnityEngine.RectTransform",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Configure a color",
            "since": ""
        },
        {
            "name": "leaderboard",
            "aliases": [
                "leaderboard",
                "custom-leaderboard"
            ],
            "components": [
                "LeaderboardTableView",
                "UnityEngine.RectTransform"
            ],
            "description": "Make a leaderboard UI copy, useful for custom leaderboards",
            "since": ""
        },
        {
            "name": "custom-list",
            "aliases": [
                "custom-list"
            ],
            "components": [
                "BSML.CustomCellListTableData",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform"
            ],
            "description": "Make a custom celled list",
            "since": ""
        },
        {
            "name": "dropdown-list-setting",
            "aliases": [
                "dropdown-list-setting"
            ],
            "components": [
                "BSML.BaseSetting",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform",
                "BSML.DropdownListSetting",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Let the user select from premade options",
            "since": ""
        },
        {
            "name": "grid",
            "aliases": [
                "grid"
            ],
            "components": [
                "BSML.Backgroundable",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.UI.GridLayoutGroup",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform"
            ],
            "description": "A grid layout, with cells along the horizontal and vertical axis",
            "since": ""
        },
        {
            "name": "horizontal",
            "aliases": [
                "horizontal"
            ],
            "components": [
                "BSML.Backgroundable",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform"
            ],
            "description": "A horizontal layout, All it's children will be laid out horizontally",
            "since": ""
        },
        {
            "name": "icon-segments",
            "aliases": [
                "icon-segments"
            ],
            "components": [
                "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
                "HMUI.IconSegmentedControl",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform"
            ],
            "description": "A copy of the characteristic selector in the song selection UI, choose different options based on icons",
            "since": ""
        },
        {
            "name": "image",
            "aliases": [
                "image",
                "img"
            ],
            "components": [
                "UnityEngine.UI.Image",
                "HMUI.ImageView",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform"
            ],
            "description": "Display an image",
            "since": ""
        },
        {
            "name": "increment-setting",
            "aliases": [
                "increment-setting"
            ],
            "components": [
                "BSML.BaseSetting",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform",
                "BSML.IncrementSetting",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Configure a numeric value with a min/max, using buttons",
            "since": ""
        },
        {
            "name": "text",
            "aliases": [
                "text",
                "label"
            ],
            "components": [
                "UnityEngine.RectTransform",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Display some text",
            "since": ""
        },
        {
            "name": "list",
            "aliases": [
                "list"
            ],
            "components": [
                "BSML.CustomListTableData",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform"
            ],
            "description": "Create a list with cells based on base-game lists",
            "since": ""
        },
        {
            "name": "list-setting",
            "aliases": [
                "list-setting"
            ],
            "components": [
                "BSML.BaseSetting",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform",
                "BSML.ListSetting",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Use buttons to choose between pre-set values",
            "since": ""
        },
        {
            "name": "list-slider-setting",
            "aliases": [
                "list-slider-setting"
            ],
            "components": [
                "BSML.BaseSetting",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform",
                "BSML.ListSliderSetting",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Use a slider to choose between pre-set values, buttons optional",
            "since": ""
        },
        {
            "name": "loading",
            "aliases": [
                "loading",
                "loading-indicator"
            ],
            "components": [
                "UnityEngine.UI.Image",
                "HMUI.ImageView",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform"
            ],
            "description": "A loading indicator",
            "since": ""
        },
        {
            "name": "modal",
            "aliases": [
                "modal"
            ],
            "components": [
                "BSML.ModalView",
                "UnityEngine.RectTransform"
            ],
            "description": "Make some UI that is used like a pop-up, meaning it's not visible by default and can be shown whenever you need or want to",
            "since": ""
        },
        {
            "name": "modal-color-picker",
            "aliases": [
                "modal-color-picker"
            ],
            "components": [
                "BSML.ModalColorPicker",
                "BSML.ModalView",
                "UnityEngine.RectTransform"
            ],
            "description": "Pick a color using a modal pop-up",
            "since": ""
        },
        {
            "name": "modal-keyboard",
            "aliases": [
                "modal-keyboard"
            ],
            "components": [
                "BSML.ModalKeyboard",
                "BSML.ModalView",
                "UnityEngine.RectTransform"
            ],
            "description": "Enter a string using a keyboard pop-up",
            "since": ""
        },
        {
            "name": "modifier",
            "aliases": [
                "modifier",
                "modifier-toggle"
            ],
            "components": [
                "BSML.BaseSetting",
                "UnityEngine.UI.Image",
                "HMUI.ImageView",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform",
                "UnityEngine.UI.Selectable",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "A copy of the modifier toggles in the gameplay menu on the left",
            "since": ""
        },
        {
            "name": "modifier-container",
            "aliases": [
                "modifier-container"
            ],
            "components": [
                "BSML.Backgroundable",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform"
            ],
            "description": "A container made to fit the gameplay menu on the left",
            "since": ""
        },
        {
            "name": "text-page",
            "aliases": [
                "text-page",
                "page"
            ],
            "components": [
                "UnityEngine.RectTransform",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "A scrollable container perfect for large quantities of text",
            "since": ""
        },
        {
            "name": "page-button",
            "aliases": [
                "page-button",
                "pg-button"
            ],
            "components": [
                "UnityEngine.UI.Button",
                "BSML.ButtonIconImage",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.UI.LayoutElement",
                "BSML.PageButton",
                "UnityEngine.RectTransform",
                "UnityEngine.UI.Selectable"
            ],
            "description": "A button perfect for scrolling up/down scrollviews or lists, since it's an arrow",
            "since": ""
        },
        {
            "name": "raw-image",
            "aliases": [
                "raw-image",
                "raw-img"
            ],
            "components": [
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.RawImage",
                "UnityEngine.RectTransform"
            ],
            "description": "Display a raw texture",
            "since": ""
        },
        {
            "name": "scroll-indicator",
            "aliases": [
                "scroll-indicator",
                "vertical-scroll-indicator"
            ],
            "components": [
                "UnityEngine.UI.Image",
                "HMUI.ImageView",
                "UnityEngine.RectTransform",
                "BSML.ScrollIndicator"
            ],
            "description": "Indicate scrolling progress",
            "since": ""
        },
        {
            "name": "scroll-view",
            "aliases": [
                "scroll-view"
            ],
            "components": [
                "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform"
            ],
            "description": "A container that can scroll through the content you define",
            "since": ""
        },
        {
            "name": "scrollable-container",
            "aliases": [
                "scrollable-container"
            ],
            "components": [
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform",
                "BSML.ScrollableContainer"
            ],
            "description": "A container that can scroll through the content you define, but doesn't come with a scroll indicator by default",
            "since": ""
        },
        {
            "name": "settings-scroll-view",
            "aliases": [
                "settings-scroll-view",
                "scrollable-settings-container",
                "settings-container"
            ],
            "components": [
                "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform"
            ],
            "description": "An expanded scroll view, but resized in the vertical direction",
            "since": ""
        },
        {
            "name": "settings-submenu",
            "aliases": [
                "settings-submenu"
            ],
            "components": [],
            "description": "A container that's used on PC for settings related things, but not supported on the quest version of BSML, will yield an empty gameObject!",
            "since": ""
        },
        {
            "name": "slider-setting",
            "aliases": [
                "slider-setting"
            ],
            "components": [
                "BSML.BaseSetting",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.RectTransform",
                "BSML.SliderSetting",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Configure a numeric value with a slider, buttons optional",
            "since": ""
        },
        {
            "name": "stack",
            "aliases": [
                "stack"
            ],
            "components": [
                "BSML.Backgroundable",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform"
            ],
            "description": "A stack layout, used to stack things on top of eachother in the Z direction",
            "since": ""
        },
        {
            "name": "string-setting",
            "aliases": [
                "string-setting"
            ],
            "components": [
                "BSML.BaseSetting",
                "UnityEngine.UI.LayoutElement",
                "BSML.ModalKeyboard",
                "BSML.ModalView",
                "UnityEngine.RectTransform",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Configure a string value, comes with it's own keyboard!",
            "since": ""
        },
        {
            "name": "tab",
            "aliases": [
                "tab"
            ],
            "components": [
                "BSML.Backgroundable",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.RectTransform",
                "BSML.Tab"
            ],
            "description": "Used with the tab selector, tag it right and you can switch between seperate tabs in your UI",
            "since": ""
        },
        {
            "name": "tab-select",
            "aliases": [
                "tab-select",
                "tab-selector"
            ],
            "components": [
                "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform",
                "BSML.TabSelector",
                "HMUI.TextSegmentedControl"
            ],
            "description": "Used with tabs, tag it right and you can switch between seperate tabs in your UI",
            "since": ""
        },
        {
            "name": "text-segments",
            "aliases": [
                "text-segments"
            ],
            "components": [
                "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform",
                "HMUI.TextSegmentedControl"
            ],
            "description": "A copy of the difficulty selector in the song selection menu, switch between values using text",
            "since": ""
        },
        {
            "name": "vertical",
            "aliases": [
                "vertical"
            ],
            "components": [
                "BSML.Backgroundable",
                "UnityEngine.UI.ContentSizeFitter",
                "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
                "UnityEngine.UI.LayoutElement",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform"
            ],
            "description": "A vertical layout, all it's children will be laid out vertically",
            "since": ""
        },
        {
            "name": "vertical-icon-segments",
            "aliases": [
                "vertical-icon-segments"
            ],
            "components": [
                "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
                "HMUI.IconSegmentedControl",
                "UnityEngine.UI.Image",
                "HMUI.ImageView",
                "UnityEngine.UI.LayoutGroup",
                "UnityEngine.RectTransform"
            ],
            "description": "A copy of the leaderboard locality selector, choose an option with icons, but vertically",
            "since": ""
        },
        {
            "name": "gradient-text",
            "aliases": [
                "gradient-text"
            ],
            "components": [
                "BSML.TextGradientUpdater",
                "UnityEngine.RectTransform",
                "TMPro.TextMeshProUGUI"
            ],
            "description": "Display some text using a gradient as the color, optionally scrolling the gradient",
            "since": "0.2.8"
        }
    ],
    "macros": [
        {
            "name": "macro.as-host",
            "aliases": [
                "macro.as-host"
            ],
            "properties": [
                {
                    "key": "host",
                    "aliases": [
                        "host"
                    ],
                    "description": "The host Object",
                    "type": "BSMLValue ID (Il2CppObject*)"
                }
            ],
            "description": "Parse the child nodes with a different host object"
        },
        {
            "name": "macro.define",
            "aliases": [
                "macro.define"
            ],
            "properties": [
                {
                    "key": "name",
                    "aliases": [
                        "name",
                        "id"
                    ],
                    "description": "the ID of the value",
                    "type": "BSMLValue ID (StringW)"
                },
                {
                    "key": "value",
                    "aliases": [
                        "value"
                    ],
                    "description": "the value of the value",
                    "type": "string"
                }
            ],
            "description": "Define a BSML string value, or set it"
        },
        {
            "name": "macro.for-each",
            "aliases": [
                "macro.for-each"
            ],
            "properties": [
                {
                    "key": "hosts",
                    "aliases": [
                        "hosts",
                        "items"
                    ],
                    "description": "The Host list value",
                    "type": "BSMLValue ID (List<Il2CppObject*>*)"
                },
                {
                    "key": "passTags",
                    "aliases": [
                        "pass-back-tags"
                    ],
                    "description": "Whether or not to also pass the tags to the parent BSMLParams",
                    "type": "bool"
                }
            ],
            "description": "Use the child nodes for every host object in the given list"
        },
        {
            "name": "macro.if",
            "aliases": [
                "macro.if"
            ],
            "properties": [
                {
                    "key": "value",
                    "aliases": [
                        "bool",
                        "value"
                    ],
                    "description": "BSMLValue id",
                    "type": "BSMLValue ID (bool)"
                }
            ],
            "description": "Use the child nodes depending on the given value"
        },
        {
            "name": "macro.print",
            "aliases": [
                "macro.print",
                "macro.log"
            ],
            "properties": [
                {
                    "key": "text",
                    "aliases": [
                        "text",
                        "string"
                    ],
                    "description": "The text to print",
                    "type": "string"
                }
            ],
            "description": "Print some text to the adb log"
        },
        {
            "name": "macro.reparent",
            "aliases": [
                "macro.reparent"
            ],
            "properties": [
                {
                    "key": "transform",
                    "aliases": [
                        "transform"
                    ],
                    "description": "ID of the value that contains the transform",
                    "type": "BSMLValue ID (Transform*)"
                },
                {
                    "key": "transforms",
                    "aliases": [
                        "transforms"
                    ],
                    "description": "ID of the value that contains the list of transforms",
                    "type": "BSMLValue ID (List<Transform*>*)"
                }
            ],
            "description": "Reparent existing transform or transforms into the hierarchy"
        },
        {
            "name": "macro.repeat",
            "aliases": [
                "macro.repeat"
            ],
            "properties": [
                {
                    "key": "count",
                    "aliases": [
                        "i",
                        "count",
                        "number"
                    ],
                    "description": "the amount of times to repeat the child nodes",
                    "type": "int"
                },
                {
                    "key": "passTags",
                    "aliases": [
                        "pass-back-tags"
                    ],
                    "description": "whether or not to pass the tags",
                    "type": "bool"
                }
            ],
            "description": "Repeat the child nodes an amount of times"
        }
    ],
    "components": [
        {
            "typename": "BSML.BaseSetting",
            "properties": [
                {
                    "key": "applyOnChange",
                    "aliases": [
                        "apply-on-change"
                    ],
                    "description": "Whether or not to apply the value immediately when it changes",
                    "type": "bool"
                },
                {
                    "key": "id",
                    "aliases": [
                        "id"
                    ],
                    "description": "The ID of the component",
                    "type": "string"
                },
                {
                    "key": "onChange",
                    "aliases": [
                        "on-change"
                    ],
                    "description": "A BSMLAction id to run when the value changes",
                    "type": "BSMLAction ID (void(T))"
                },
                {
                    "key": "value",
                    "aliases": [
                        "value"
                    ],
                    "description": "The ID of the value to change",
                    "type": "BSMLValue ID (T)"
                }
            ],
            "description": "A component that BSML uses to identify settings, so it knows where to look for values to set"
        },
        {
            "typename": "BSML.Backgroundable",
            "properties": [
                {
                    "key": "background",
                    "aliases": [
                        "bg",
                        "background"
                    ],
                    "description": "The name of the background sprite to use",
                    "type": "string"
                },
                {
                    "key": "backgroundAlpha",
                    "aliases": [
                        "bg-alpha"
                    ],
                    "description": "Value for how transparent the background is",
                    "type": "float"
                },
                {
                    "key": "backgroundColor",
                    "aliases": [
                        "bg-color",
                        "background-color"
                    ],
                    "description": "Color value of the background",
                    "type": "HTML Color String"
                }
            ],
            "description": "This component handles setting the background imageviews on layouts"
        },
        {
            "typename": "UnityEngine.UI.Button",
            "properties": [
                {
                    "key": "clickEvent",
                    "aliases": [
                        "click-event",
                        "event-click"
                    ],
                    "description": "The event to run when the button is clicked (not supported)",
                    "type": "-"
                },
                {
                    "key": "onClick",
                    "aliases": [
                        "on-click"
                    ],
                    "description": "BSMLAction id to run when the button is clicked",
                    "type": "BSMLAction ID (void(void))"
                }
            ],
            "description": "The button component from Unity"
        },
        {
            "typename": "BSML.ButtonIconImage",
            "properties": [
                {
                    "key": "icon",
                    "aliases": [
                        "icon"
                    ],
                    "description": "Image source for the icon",
                    "type": "string"
                }
            ],
            "description": "Component to handle setting the image on icon buttons"
        },
        {
            "typename": "BSML.ClickableImage",
            "properties": [
                {
                    "key": "clickEvent",
                    "aliases": [
                        "click-event",
                        "event-click"
                    ],
                    "description": "The event to run when the image is clicked (not supported)",
                    "type": "-"
                },
                {
                    "key": "defaultColor",
                    "aliases": [
                        "default-color"
                    ],
                    "description": "The color the image is when it's not hovered",
                    "type": "HTML Color String"
                },
                {
                    "key": "highlightColor",
                    "aliases": [
                        "highlight-color"
                    ],
                    "description": "The color the image becomes when it gets hovered",
                    "type": "HTML Color String"
                },
                {
                    "key": "onClick",
                    "aliases": [
                        "on-click"
                    ],
                    "description": "BSMLAction id to run when the button is clicked",
                    "type": "BSMLAction ID (void(void))"
                }
            ],
            "description": "A component to make a Clickable ImageView within the Beat Saber UI"
        },
        {
            "typename": "BSML.ClickableText",
            "properties": [
                {
                    "key": "clickEvent",
                    "aliases": [
                        "click-event",
                        "event-click"
                    ],
                    "description": "The event to run when the image is clicked (not supported)",
                    "type": "-"
                },
                {
                    "key": "defaultColor",
                    "aliases": [
                        "default-color"
                    ],
                    "description": "The color the text is when it's not hovered",
                    "type": "HTML Color String"
                },
                {
                    "key": "highlightColor",
                    "aliases": [
                        "highlight-color"
                    ],
                    "description": "The color the text is when it gets hovered",
                    "type": "HTML Color String"
                },
                {
                    "key": "onClick",
                    "aliases": [
                        "on-click"
                    ],
                    "description": "BSMLAction id to run when the text is clicked",
                    "type": "BSMLAction ID (void(void))"
                }
            ],
            "description": "A component to make a Clickable TextMeshProUGUI within the Beat Saber UI"
        },
        {
            "typename": "UnityEngine.UI.ContentSizeFitter",
            "properties": [
                {
                    "key": "horizontalFit",
                    "aliases": [
                        "horizontal-fit"
                    ],
                    "description": "Fit mode used to determine the width",
                    "type": "enum ContentSizeFitter::Fitmode"
                },
                {
                    "key": "verticalFit",
                    "aliases": [
                        "vertical-fit"
                    ],
                    "description": "Fit mode used to determine the height",
                    "type": "enum ContentSizeFitter::Fitmode"
                }
            ],
            "description": "Component to resize a RectTransform to fit it's content"
        },
        {
            "typename": "BSML.CustomCellListTableData",
            "properties": [
                {
                    "key": "alignCenter",
                    "aliases": [
                        "align-to-center"
                    ],
                    "description": "Whether or not to align the cells to the center",
                    "type": "bool"
                },
                {
                    "key": "cellClickable",
                    "aliases": [
                        "clickable-cells"
                    ],
                    "description": "Whether or not hte cells are clickable",
                    "type": "bool"
                },
                {
                    "key": "cellSize",
                    "aliases": [
                        "cell-size"
                    ],
                    "description": "The size of the cells",
                    "type": "float"
                },
                {
                    "key": "cellTemplate",
                    "aliases": [
                        "_children"
                    ],
                    "description": "not used",
                    "type": "-"
                },
                {
                    "key": "data",
                    "aliases": [
                        "contents",
                        "data"
                    ],
                    "description": "List of objects used for the content of the list",
                    "type": "BSMLValue ID (List<Il2CppObject*>*)"
                },
                {
                    "key": "id",
                    "aliases": [
                        "id"
                    ],
                    "description": "The ID of the component",
                    "type": "string"
                },
                {
                    "key": "listDirection",
                    "aliases": [
                        "list-direction"
                    ],
                    "description": "Whether or not the list is vertical or horizontal",
                    "type": "enum TableView::TableType"
                },
                {
                    "key": "listHeight",
                    "aliases": [
                        "list-height"
                    ],
                    "description": "List height, only relevant for horizontal lists",
                    "type": "float"
                },
                {
                    "key": "listWidth",
                    "aliases": [
                        "list-width"
                    ],
                    "description": "List width, only relevant for vertical lists",
                    "type": "float"
                },
                {
                    "key": "selectCell",
                    "aliases": [
                        "select-cell"
                    ],
                    "description": "BSMLAction id to run when a cell is selected",
                    "type": "BSMLAction ID (void(TableView*, int))"
                },
                {
                    "key": "showScrollbar",
                    "aliases": [
                        "show-scrollbar"
                    ],
                    "description": "Whether or not to show a scroll bar",
                    "type": "bool"
                },
                {
                    "key": "stickScrolling",
                    "aliases": [
                        "stick-scrolling"
                    ],
                    "description": "Whether or not to allow scrolling using a stick",
                    "type": "bool"
                },
                {
                    "key": "visibleCells",
                    "aliases": [
                        "visible-cells"
                    ],
                    "description": "How many cells long / wide to make the list",
                    "type": "int"
                }
            ],
            "description": "A component from BSML to make a custom cell table"
        },
        {
            "typename": "BSML.CustomListTableData",
            "properties": [
                {
                    "key": "alignCenter",
                    "aliases": [
                        "align-to-center"
                    ],
                    "description": "Whether or not to align the cells to the center",
                    "type": "bool"
                },
                {
                    "key": "cellSize",
                    "aliases": [
                        "cell-size"
                    ],
                    "description": "Whether or not the cells are clickable",
                    "type": "float"
                },
                {
                    "key": "data",
                    "aliases": [
                        "data",
                        "content"
                    ],
                    "description": "List of BSML::CustomCellInfo to use for the content of the list",
                    "type": "BSMLValue ID (List<BSML::CustomCellInfo*>*)"
                },
                {
                    "key": "expandCell",
                    "aliases": [
                        "expand-cell"
                    ],
                    "description": "Whether or not to expand the cell to allow for longer text, only relevant for List style",
                    "type": "bool"
                },
                {
                    "key": "id",
                    "aliases": [
                        "id"
                    ],
                    "description": "The ID of the component",
                    "type": "string"
                },
                {
                    "key": "listDirection",
                    "aliases": [
                        "list-direction"
                    ],
                    "description": "Whether or not the list is vertical or horizontal",
                    "type": "enum TableView::TableType"
                },
                {
                    "key": "listHeight",
                    "aliases": [
                        "list-height"
                    ],
                    "description": "List height, only relevant for horizontal lists",
                    "type": "float"
                },
                {
                    "key": "listStyle",
                    "aliases": [
                        "list-style"
                    ],
                    "description": "The style of the list",
                    "type": "enum CustomListTableData::ListStyle"
                },
                {
                    "key": "listWidth",
                    "aliases": [
                        "list-width"
                    ],
                    "description": "List width, only relevant for horizontal lists",
                    "type": "float"
                },
                {
                    "key": "selectCell",
                    "aliases": [
                        "select-cell"
                    ],
                    "description": "BSMLAction id to run when a cell is selected",
                    "type": "BSMLAction ID (void(TableView*, int))"
                },
                {
                    "key": "showScrollbar",
                    "aliases": [
                        "show-scrollbar"
                    ],
                    "description": "Whether or not to show a scroll bar",
                    "type": "bool"
                },
                {
                    "key": "stickScrolling",
                    "aliases": [
                        "stick-scrolling"
                    ],
                    "description": "Whether or not to allow scrolling with the sticks",
                    "type": "bool"
                },
                {
                    "key": "visibleCells",
                    "aliases": [
                        "visible-cells"
                    ],
                    "description": "How many cells long / wide to make the list",
                    "type": "int"
                }
            ],
            "description": "A component from BSML to make a base game list"
        },
        {
            "typename": "UnityEngine.UI.GridLayoutGroup",
            "properties": [
                {
                    "key": "cellSizeX",
                    "aliases": [
                        "cell-size-x"
                    ],
                    "description": "The size of cells in the horizontal direction",
                    "type": "float"
                },
                {
                    "key": "cellSizeY",
                    "aliases": [
                        "cell-size-y"
                    ],
                    "description": "The size of cells in the vertical direction",
                    "type": "float"
                },
                {
                    "key": "spacingX",
                    "aliases": [
                        "spacing-x"
                    ],
                    "description": "The spacing of cells in the horizontal direction",
                    "type": "float"
                },
                {
                    "key": "spacingY",
                    "aliases": [
                        "spacing-y"
                    ],
                    "description": "The spacing of cells in the vertical direction",
                    "type": "float"
                }
            ],
            "description": "A component from unity to define a grid layout"
        },
        {
            "typename": "UnityEngine.UI.HorizontalOrVerticalLayoutGroup",
            "properties": [
                {
                    "key": "childControlHeight",
                    "aliases": [
                        "child-control-height"
                    ],
                    "description": "True if the layoutGroup should control the height of it's children, false if they decide themselves",
                    "type": "bool"
                },
                {
                    "key": "childControlWidth",
                    "aliases": [
                        "child-control-width"
                    ],
                    "description": "True if the layoutGroup should control the width of its children, false if they decide themselves",
                    "type": "bool"
                },
                {
                    "key": "childForceExpandHeight",
                    "aliases": [
                        "child-expand-height"
                    ],
                    "description": "True if children should be forced to fill the additionally available vertical space, false if not",
                    "type": "bool"
                },
                {
                    "key": "childForceExpandWidth",
                    "aliases": [
                        "child-expand-width"
                    ],
                    "description": "True if children should be forced to fill the additionally available horizontal space, false if not",
                    "type": "bool"
                },
                {
                    "key": "spacing",
                    "aliases": [
                        "spacing"
                    ],
                    "description": "The spacing between elements in the group",
                    "type": "float"
                }
            ],
            "description": "A component from unity to abstract a Horizontal or Vertical layout"
        },
        {
            "typename": "HMUI.IconSegmentedControl",
            "properties": [
                {
                    "key": "data",
                    "aliases": [
                        "contents",
                        "data"
                    ],
                    "description": "List of IconSegmentedControl::DataItem to use for the content",
                    "type": "BSMLValue ID (List<IconSegmentedControl::DataItem*>*)"
                },
                {
                    "key": "selectCell",
                    "aliases": [
                        "select-cell",
                        "cell-select"
                    ],
                    "description": "BSMLAction id to run when a cell is selected",
                    "type": "BSMLAction ID (void(SegmentedControl*, int))"
                }
            ],
            "description": "A Beat Saber UI Component used to let the user choose between different icons (Characteristic selector)"
        },
        {
            "typename": "UnityEngine.UI.Image",
            "properties": [
                {
                    "key": "image",
                    "aliases": [
                        "source",
                        "src"
                    ],
                    "description": "The image to display",
                    "type": "string"
                },
                {
                    "key": "imageColor",
                    "aliases": [
                        "image-color",
                        "img-color"
                    ],
                    "description": "The color of the image",
                    "type": "HTML Color String"
                },
                {
                    "key": "preserveAspect",
                    "aliases": [
                        "preserve-aspect"
                    ],
                    "description": "Whether or not to preserve the aspect ratio of the image",
                    "type": "bool"
                }
            ],
            "description": "A unity Component to display a Sprite in UI"
        },
        {
            "typename": "HMUI.ImageView",
            "properties": [
                {
                    "key": "skew",
                    "aliases": [
                        "skew"
                    ],
                    "description": "How much skew should the image have (BS uses 0.18 by default)",
                    "type": "float"
                }
            ],
            "description": "A Beat Saber UI component to wrap an Image"
        },
        {
            "typename": "UnityEngine.UI.LayoutElement",
            "properties": [
                {
                    "key": "ignoreLayout",
                    "aliases": [
                        "ignore-layout"
                    ],
                    "description": "Whether or not the layout system should ignore the layoutelement",
                    "type": "bool"
                },
                {
                    "key": "minHeight",
                    "aliases": [
                        "min-height"
                    ],
                    "description": "The minimum height that should be allocated for this element",
                    "type": "float"
                },
                {
                    "key": "minWidth",
                    "aliases": [
                        "min-width"
                    ],
                    "description": "The minimum width that should be allocated for this element",
                    "type": "float"
                },
                {
                    "key": "preferredHeight",
                    "aliases": [
                        "preferred-height",
                        "pref-height"
                    ],
                    "description": "the preferred height this element should be if there is enough space",
                    "type": "float"
                },
                {
                    "key": "preferredWidth",
                    "aliases": [
                        "preferred-width",
                        "pref-width"
                    ],
                    "description": "The preferred width this element should be if there is enough space",
                    "type": "float"
                }
            ],
            "description": "A component to automatically layout a gameObject within UI"
        },
        {
            "typename": "UnityEngine.UI.LayoutGroup",
            "properties": [
                {
                    "key": "childAlign",
                    "aliases": [
                        "child-align"
                    ],
                    "description": "The alignment used for children of this group",
                    "type": "enum UnityEngine::TextAnchor"
                },
                {
                    "key": "pad",
                    "aliases": [
                        "pad"
                    ],
                    "description": "The padding for this layout",
                    "type": "int"
                },
                {
                    "key": "padBottom",
                    "aliases": [
                        "pad-bottom"
                    ],
                    "description": "Bottom padding",
                    "type": "int"
                },
                {
                    "key": "padLeft",
                    "aliases": [
                        "pad-left"
                    ],
                    "description": "Left padding",
                    "type": "int"
                },
                {
                    "key": "padRight",
                    "aliases": [
                        "pad-right"
                    ],
                    "description": "Right padding",
                    "type": "int"
                },
                {
                    "key": "padTop",
                    "aliases": [
                        "pad-top"
                    ],
                    "description": "Top padding",
                    "type": "int"
                }
            ],
            "description": "A base class for all layout groups"
        },
        {
            "typename": "LeaderboardTableView",
            "properties": [
                {
                    "key": "cellSize",
                    "aliases": [
                        "cell-size"
                    ],
                    "description": "How big the cells should be",
                    "type": "float"
                }
            ],
            "description": "The Beat Saber Leaderboard tableview"
        },
        {
            "typename": "BSML.ModalColorPicker",
            "properties": [
                {
                    "key": "onCancel",
                    "aliases": [
                        "on-cancel"
                    ],
                    "description": "BSMLAction id to run when cancel is pressed",
                    "type": "BSMLAction ID (void(void))"
                },
                {
                    "key": "onChange",
                    "aliases": [
                        "color-change"
                    ],
                    "description": "BSMLAction id to run when the value changes",
                    "type": "BSMLAction ID (void(Color))"
                },
                {
                    "key": "onDone",
                    "aliases": [
                        "on-done"
                    ],
                    "description": "BSM:Action id to run when done is pressed",
                    "type": "BSMLAction ID (void(Color))"
                },
                {
                    "key": "value",
                    "aliases": [
                        "value"
                    ],
                    "description": "BSMLValue id of the value to change",
                    "type": "BSMLValue ID (Color)"
                }
            ],
            "description": "A BSML component used to pick colors"
        },
        {
            "typename": "BSML.ModalKeyboard",
            "properties": [
                {
                    "key": "clearOnOpen",
                    "aliases": [
                        "clear-on-open"
                    ],
                    "description": "Whether or not to clear the current string on opening the keyboard",
                    "type": "bool"
                },
                {
                    "key": "onEnter",
                    "aliases": [
                        "on-enter"
                    ],
                    "description": "BSMLAction id to run when enter is pressed",
                    "type": "BSMLAction ID (void(StringW))"
                },
                {
                    "key": "value",
                    "aliases": [
                        "value"
                    ],
                    "description": "BSMLValue id of the value to change",
                    "type": "BSMLValue ID (StringW)"
                }
            ],
            "description": "A BSML Component used to make a keyboard"
        },
        {
            "typename": "BSML.ModalView",
            "properties": [
                {
                    "key": "clickOffCloses",
                    "aliases": [
                        "click-off-closes",
                        "clickerino-offerino-closerino"
                    ],
                    "description": "Whether or not clicking off of the modal closes the modal",
                    "type": "bool"
                },
                {
                    "key": "hideEvent",
                    "aliases": [
                        "hide-event"
                    ],
                    "description": "Event to run when the modal hides (not supported)",
                    "type": "-"
                },
                {
                    "key": "id",
                    "aliases": [
                        "id"
                    ],
                    "description": "The ID of the component",
                    "type": "string"
                },
                {
                    "key": "moveToCenter",
                    "aliases": [
                        "move-to-center"
                    ],
                    "description": "Whether or not to move the modal to the center of the view when it's opened, no matter where it's coming from",
                    "type": "bool"
                },
                {
                    "key": "showEvent",
                    "aliases": [
                        "show-event"
                    ],
                    "description": "Event to run when the modal is shown (not supported)",
                    "type": "-"
                }
            ],
            "description": "A BSML Component to wrap the Beat Saber ModalView"
        },
        {
            "typename": "BSML.PageButton",
            "properties": [
                {
                    "key": "direction",
                    "aliases": [
                        "dir",
                        "direction"
                    ],
                    "description": "The direction of the button to set",
                    "type": "enum PageButtonDirection"
                }
            ],
            "description": "A BSML Component to know if a button is a page button"
        },
        {
            "typename": "UnityEngine.UI.RawImage",
            "properties": [
                {
                    "key": "image",
                    "aliases": [
                        "source",
                        "src"
                    ],
                    "description": "The texture to display",
                    "type": "string"
                }
            ],
            "description": "A Component from Unity to display a raw texture"
        },
        {
            "typename": "UnityEngine.RectTransform",
            "properties": [
                {
                    "key": "active",
                    "aliases": [
                        "active"
                    ],
                    "description": "Whether or not this object starts enabled",
                    "type": "bool"
                },
                {
                    "key": "anchorMaxX",
                    "aliases": [
                        "anchor-max-x"
                    ],
                    "description": "The normalized position in the parent RectTransform that the upper right corner is anchored to",
                    "type": "float"
                },
                {
                    "key": "anchorMaxY",
                    "aliases": [
                        "anchor-max-y"
                    ],
                    "description": "The normalized position in the parent RectTransform that the upper right corner is anchored to",
                    "type": "float"
                },
                {
                    "key": "anchorMinX",
                    "aliases": [
                        "anchor-min-x"
                    ],
                    "description": "The normalized position in the parent RectTransform that the lower left corner is anchored to",
                    "type": "float"
                },
                {
                    "key": "anchorMinY",
                    "aliases": [
                        "anchor-min-y"
                    ],
                    "description": "The normalized position in the parent RectTransform that the lower left corner is anchored to",
                    "type": "float"
                },
                {
                    "key": "anchorPosX",
                    "aliases": [
                        "anchor-pos-x"
                    ],
                    "description": "The position of the pivot of this RectTransform relative to the anchor reference point",
                    "type": "float"
                },
                {
                    "key": "anchorPosY",
                    "aliases": [
                        "anchor-pos-y"
                    ],
                    "description": "The position of the pivot of this RectTransform relative to the anchor reference point",
                    "type": "float"
                },
                {
                    "key": "hoverHint",
                    "aliases": [
                        "hover-hint"
                    ],
                    "description": "The hoverhint to display when this object is hovered",
                    "type": "string"
                },
                {
                    "key": "hoverHintKey",
                    "aliases": [
                        "hover-hint-key"
                    ],
                    "description": "The hoverhint Key to use for localization (not supported)",
                    "type": "string"
                },
                {
                    "key": "pivotX",
                    "aliases": [
                        "pivot-x"
                    ],
                    "description": "The normalized position in this RectTransform that it rotates around",
                    "type": "float"
                },
                {
                    "key": "pivotY",
                    "aliases": [
                        "pivot-y"
                    ],
                    "description": "The normalized position in this RectTransform that it rotates around",
                    "type": "float"
                },
                {
                    "key": "sizeDeltaX",
                    "aliases": [
                        "size-delta-x"
                    ],
                    "description": "The size of this RectTransform relative to the distances between the anchors",
                    "type": "float"
                },
                {
                    "key": "sizeDeltaY",
                    "aliases": [
                        "size-delta-y"
                    ],
                    "description": "The size of this RectTransform relative to the distances between the anchors",
                    "type": "float"
                }
            ],
            "description": "Transform information for UI objects from Unity"
        },
        {
            "typename": "BSML.ScrollIndicator",
            "properties": [
                {
                    "key": "handleColor",
                    "aliases": [
                        "handle-color"
                    ],
                    "description": "The color of the handle image",
                    "type": "HTML Color String"
                },
                {
                    "key": "handleImage",
                    "aliases": [
                        "handle-image"
                    ],
                    "description": "The image for the handle",
                    "type": "string"
                }
            ],
            "description": "BSML Component that handles making the ScrollIndicator Work"
        },
        {
            "typename": "BSML.ScrollableContainer",
            "properties": [
                {
                    "key": "alignBottom",
                    "aliases": [
                        "align-bottom"
                    ],
                    "description": "Whether or not to align the bottom of the container with the content",
                    "type": "bool"
                },
                {
                    "key": "id",
                    "aliases": [
                        "id"
                    ],
                    "description": "The ID of the component",
                    "type": "string"
                },
                {
                    "key": "maskOverflow",
                    "aliases": [
                        "mask-overflow"
                    ],
                    "description": "Whether or not to mask the overflow",
                    "type": "bool"
                }
            ],
            "description": "BSML Component that makes sure the container can be scrolled correctly"
        },
        {
            "typename": "UnityEngine.UI.Selectable",
            "properties": [
                {
                    "key": "interactable",
                    "aliases": [
                        "interactable"
                    ],
                    "description": "Whether or not this element is interactable",
                    "type": "bool"
                }
            ],
            "description": "A Component from Unity that denotes a selectable UI element"
        },
        {
            "typename": "BSML.DropdownListSetting",
            "properties": [
                {
                    "key": "options",
                    "aliases": [
                        "options",
                        "choices"
                    ],
                    "description": "BSMLValue id of the Object list to use",
                    "type": "BSMLValue ID (List<Il2CppObject*>*)"
                }
            ],
            "description": "A BSML Component to use a drop down list"
        },
        {
            "typename": "BSML.IncrementSetting",
            "properties": [
                {
                    "key": "digits",
                    "aliases": [
                        "digits"
                    ],
                    "description": "Precision after the decimal seperator",
                    "type": "int"
                },
                {
                    "key": "increment",
                    "aliases": [
                        "increment"
                    ],
                    "description": "How much to increment the value by for every button press",
                    "type": "float"
                },
                {
                    "key": "isInt",
                    "aliases": [
                        "integer-only"
                    ],
                    "description": "Whether or not this value is an integer",
                    "type": "bool"
                },
                {
                    "key": "maxValue",
                    "aliases": [
                        "max"
                    ],
                    "description": "The max value",
                    "type": "float"
                },
                {
                    "key": "minValue",
                    "aliases": [
                        "min"
                    ],
                    "description": "The minimum value",
                    "type": "float"
                }
            ],
            "description": "A BSML Component to use an increment setting"
        },
        {
            "typename": "BSML.ListSetting",
            "properties": [
                {
                    "key": "options",
                    "aliases": [
                        "options",
                        "choices"
                    ],
                    "description": "BSMLValue id of the Object list to use",
                    "type": "BSMLValue ID (List<Il2CppObject*>*)"
                }
            ],
            "description": "A BSML Component to use a list setting"
        },
        {
            "typename": "BSML.ListSliderSetting",
            "properties": [
                {
                    "key": "options",
                    "aliases": [
                        "options",
                        "choices"
                    ],
                    "description": "BSMLValue id of the Object list to use",
                    "type": "BSMLValue ID (List<Il2CppObject*>*)"
                },
                {
                    "key": "showButtons",
                    "aliases": [
                        "show-buttons"
                    ],
                    "description": "Whether or not to show the buttons for the slider",
                    "type": "bool"
                }
            ],
            "description": "A BSML Component to use a List Slider setting"
        },
        {
            "typename": "BSML.SliderSetting",
            "properties": [
                {
                    "key": "digits",
                    "aliases": [
                        "digits"
                    ],
                    "description": "Precision after the decimal seperator",
                    "type": "int"
                },
                {
                    "key": "increment",
                    "aliases": [
                        "increment"
                    ],
                    "description": "How much to increment the value per slider tick",
                    "type": "float"
                },
                {
                    "key": "isInt",
                    "aliases": [
                        "integer-only"
                    ],
                    "description": "Whether or not this value is an integer",
                    "type": "bool"
                },
                {
                    "key": "maxValue",
                    "aliases": [
                        "max"
                    ],
                    "description": "The max value",
                    "type": "float"
                },
                {
                    "key": "minValue",
                    "aliases": [
                        "min"
                    ],
                    "description": "the minimum value",
                    "type": "float"
                },
                {
                    "key": "showButtons",
                    "aliases": [
                        "show-buttons"
                    ],
                    "description": "Whether or not to show the buttons for the slider",
                    "type": "bool"
                }
            ],
            "description": "A BSML Component to use a Slider setting"
        },
        {
            "typename": "BSML.Tab",
            "properties": [
                {
                    "key": "tabName",
                    "aliases": [
                        "tab-name"
                    ],
                    "description": "The name of the tab",
                    "type": "string"
                },
                {
                    "key": "tabNameKey",
                    "aliases": [
                        "tab-name-key"
                    ],
                    "description": "The key of the tab for localization",
                    "type": "string"
                }
            ],
            "description": "A BSML Component for defining tabs"
        },
        {
            "typename": "BSML.TabSelector",
            "properties": [
                {
                    "key": "leftButtonTag",
                    "aliases": [
                        "left-button-tag"
                    ],
                    "description": "The tag used for the 'Left' button",
                    "type": "string"
                },
                {
                    "key": "pageCount",
                    "aliases": [
                        "page-count"
                    ],
                    "description": "The amount of tabs per page this component should display",
                    "type": "int"
                },
                {
                    "key": "rightButtonTag",
                    "aliases": [
                        "right-button-tag"
                    ],
                    "description": "The tag used for the 'Right' button",
                    "type": "string"
                },
                {
                    "key": "tabTag",
                    "aliases": [
                        "tab-tag"
                    ],
                    "description": "The tag tabs should use if they belong to this selector",
                    "type": "string"
                }
            ],
            "description": "A BSML Component to select different tabs"
        },
        {
            "typename": "TMPro.TextMeshProUGUI",
            "properties": [
                {
                    "key": "allUppercase",
                    "aliases": [
                        "all-uppercase"
                    ],
                    "description": "Whether or not all the text should be uppercase",
                    "type": "bool"
                },
                {
                    "key": "bold",
                    "aliases": [
                        "bold"
                    ],
                    "description": "Whether or not the text should be bold",
                    "type": "bool"
                },
                {
                    "key": "faceColor",
                    "aliases": [
                        "face-color"
                    ],
                    "description": "The face color of the font",
                    "type": "HTML Color String"
                },
                {
                    "key": "fontAlign",
                    "aliases": [
                        "font-align",
                        "align"
                    ],
                    "description": "How to align the text",
                    "type": "enum TMPro::TextAlignmentOptions"
                },
                {
                    "key": "fontColor",
                    "aliases": [
                        "font-color"
                    ],
                    "description": "The color of the font",
                    "type": "HTML Color String"
                },
                {
                    "key": "fontSize",
                    "aliases": [
                        "font-size"
                    ],
                    "description": "The size of the font",
                    "type": "float"
                },
                {
                    "key": "italics",
                    "aliases": [
                        "italics"
                    ],
                    "description": "Whether or not the text should be italics",
                    "type": "bool"
                },
                {
                    "key": "outlineColor",
                    "aliases": [
                        "outline-color"
                    ],
                    "description": "The color of the outline",
                    "type": "HTML Color String"
                },
                {
                    "key": "outlineWidth",
                    "aliases": [
                        "outline-width"
                    ],
                    "description": "The width of the outline",
                    "type": "float"
                },
                {
                    "key": "overflowMode",
                    "aliases": [
                        "overflow-mode"
                    ],
                    "description": "How to handle text overflow",
                    "type": "enum TMPro::TextOverflowModes"
                },
                {
                    "key": "richText",
                    "aliases": [
                        "rich-text"
                    ],
                    "description": "Whether or not to allow rich text",
                    "type": "bool"
                },
                {
                    "key": "strikethrough",
                    "aliases": [
                        "strikethrough"
                    ],
                    "description": "Whether or not the text should be strikethrough",
                    "type": "bool"
                },
                {
                    "key": "text",
                    "aliases": [
                        "text",
                        "label"
                    ],
                    "description": "The text to show",
                    "type": "string"
                },
                {
                    "key": "underlined",
                    "aliases": [
                        "underlined"
                    ],
                    "description": "Whether or not the text should be underlined",
                    "type": "bool"
                },
                {
                    "key": "wordWrapping",
                    "aliases": [
                        "word-wrapping"
                    ],
                    "description": "Whether to wrap the text",
                    "type": "bool"
                }
            ],
            "description": "A Text Component from TMPro"
        },
        {
            "typename": "HMUI.TextSegmentedControl",
            "properties": [
                {
                    "key": "data",
                    "aliases": [
                        "contents",
                        "data"
                    ],
                    "description": "BSMLValue id of the List<StringW> to use",
                    "type": "BSMLValue ID (List<StringW>*)"
                },
                {
                    "key": "selectCell",
                    "aliases": [
                        "select-cell",
                        "cell-select"
                    ],
                    "description": "BSMLAction id to run when a cell is clicked",
                    "type": "BSMLAction ID (void(SegmentedControl*, int))"
                }
            ],
            "description": "A Beat Saber UI Component to handle selecting different pieces of text (Difficulty select)"
        },
        {
            "typename": "BSML.TextGradientUpdater",
            "properties": [
                {
                    "key": "gradientScrollSpeed",
                    "aliases": [
                        "gradient-speed",
                        "gradient-scroll-speed"
                    ],
                    "description": "The scroll speed of the gradient across the text",
                    "type": "float"
                },
                {
                    "key": "gradientScrollRepeat",
                    "aliases": [
                        "gradient-repeat",
                        "gradient-scroll-repeat"
                    ],
                    "description": "How many times the gradient repeats across the text",
                    "type": "float"
                },
                {
                    "key": "gradientColors",
                    "aliases": [
                        "gradient-colors",
                        "gradient"
                    ],
                    "description": "The colors the gradient should be",
                    "type": "List of HTML Color String"
                },
                {
                    "key": "gradientFixedStep",
                    "aliases": [
                        "gradient-fixed-step"
                    ],
                    "description": "Whether the gradient should use fixed steps instead of going once around the text",
                    "type": "bool"
                },
                {
                    "key": "gradientStepSize",
                    "aliases": [
                        "gradient-step-size",
                        "gradient-fixed-step-size"
                    ],
                    "description": "How big each step should be",
                    "type": "float"
                }
            ],
            "description": "A component that updates the text colors each LateUpdate call"
        }
    ],
    "arguments": [
        {
            "name": "bool",
            "description": "Boolean value",
            "possibleValues": [
                "true",
                "false"
            ]
        },
        {
            "name": "string",
            "description": "Text value",
            "possibleValues": [
                "BSML is cool",
                "I like trains",
                "Pink Cute"
            ]
        },
        {
            "name": "float",
            "description": "Decimal value",
            "possibleValues": [
                "0", "1", "-0.2", "25500.3654"
            ]
        },
        {
            "name": "int",
            "description": "Integer value",
            "possibleValues": [
                "0", "2", "420", "-69"
            ]
        },
        {
            "name": "HTML Color String",
            "description": "A color string as used in HTML",
            "possibleValues": [
                "#ffffff",
                "red",
                "rgb(255, 255, 255)"
            ]
        },
        {
            "name": "List of HTML Color String",
            "description": "A list of color strings as used in HTML, colors seperated by semicolons (;)",
            "possibleValues": [
                "rgb(0, 200, 0);rgb(0, 50, 0)",
                "red;yellow;green;cyan;blue;magenta;red",
                "#5bcefa;#f5a9b8;#ffffff;#f5a9b8;#5bcefa"
            ]
        },
        {
            "name": "enum TMPro::TextAlignmentOptions",
            "description": "Text Alignment enum from TMPro",
            "possibleValues": [
                "TopLeft",
                "Top",
                "TopRight",
                "TopJustified",
                "TopFlush",
                "TopGeoAligned",
                "Left",
                "Center",
                "Right",
                "Justified",
                "Flush",
                "CenterGeoAligned",
                "BottomLeft",
                "Bottom",
                "BottomRight",
                "BottomJustified",
                "BottomFlush",
                "BottomGeoAligned",
                "BaselineLeft",
                "Baseline",
                "BaselineRight",
                "BaselineJustified",
                "BaselineFlush",
                "BaselineGeoAligned",
                "MidlineLeft",
                "Midline",
                "MidlineRight",
                "MidlineJustified",
                "MidlineFlush",
                "MidlineGeoAligned",
                "CaplineLeft",
                "Capline",
                "CaplineRight",
                "CaplineJustified",
                "CaplineFlush",
                "CaplineGeoAligned"
            ]
        },
        {
            "name": "enum TMPro::TextOverflowModes",
            "description": "Text Overflow mode enum from TMPro",
            "possibleValues": [
                "Overflow",
                "Ellipsis",
                "Masking",
                "Truncate",
                "ScrollRect",
                "Page",
                "Linked"
            ]
        },
        {
            "name": "enum ContentSizeFitter::Fitmode",
            "description": "Fit Mode enum from UnityEngine",
            "possibleValues": [
                "Unconstrained",
                "MinSize",
                "PreferredSize"
            ]
        },
        {
            "name": "enum TableView::TableType",
            "description": "Table Type enum from HMUI",
            "possibleValues": [
                "Horizontal",
                "Vertical"
            ]
        },
        {
            "name": "enum CustomListTableData::ListStyle",
            "description": "List Style enum from BSML",
            "possibleValues": [
                "List",
                "Box",
                "Simple"
            ]
        },
        {
            "name": "enum UnityEngine::TextAnchor",
            "description": "Text Anchor enum from UnityEngine",
            "possibleValues": [
                "UpperLeft",
                "UpperCenter",
                "UpperRight",
                "MiddleLeft",
                "MiddleCenter",
                "MiddleRight",
                "LowerLeft",
                "LowerCenter",
                "LowerRight"
            ]
        },
        {
            "name": "enum PageButtonDirection",
            "description": "Page button rotation enum from BSML",
            "possibleValues": [
                "Up",
                "Down",
                "Left",
                "Right"
            ]
        },
        {
            "name": "-",
            "description": "This argument is undefined",
            "possibleValues": []
        },
        {
            "name": "BSMLValue",
            "description": "A BSMLValue is any C# field name on your host object, or any method pair prefixed with get_ and set_",
            "possibleValues": [
                "DECLARE_INSTANCE_FIELD(UnityEngine::Color, userColor);", "DECLARE_INSTANCE_METHOD(List<StringW>*, get_list);",  "DECLARE_INSTANCE_METHOD(void, set_list, List<StringW>* value);"
            ]
        },
        {
            "name": "BSMLValue ID (T)",
            "description": "A BSML Value ID that points to a T, where T is related to the tag you are using",
            "possibleValues": [
                "saberLength", "theColor", "theTexture"
            ]
        },
        {
            "name": "BSMLValue ID (List<IconSegmentedControl::DataItem*>*)",
            "description": "A BSML Value ID that points to a List<IconSegmentedControl::DataItem*>*",
            "possibleValues": [
                "MyIconList", "SelectionIcons", "LeaderboardIcons"
            ]
        },
        {
            "name": "BSMLValue ID (List<Il2CppObject*>*)",
            "description": "A BSML Value ID that points to a List<Il2CppObject*>*",
            "possibleValues": [
                "CustomCellData"
            ]
        },
        {
            "name": "BSMLValue ID (List<BSML::CustomCellInfo*>*)",
            "description": "A BSML Value ID that points to a List<BSML::CustomCellInfo*>*",
            "possibleValues": [
                "TextureListCellData", "PlaylistCellData"
            ]
        },
        {
            "name": "BSMLValue ID (Color)",
            "description": "A BSML Value ID that points to a Color",
            "possibleValues": [
                "SetBloqColor", "BloqColorUpdated"
            ]
        },
        {
            "name": "BSMLValue ID (StringW)",
            "description": "A BSML Value ID that points to a StringW",
            "possibleValues": [
                "username", "url", "searchvalue"
            ]
        },
        {
            "name": "BSMLValue ID (List<StringW>*)",
            "description": "A BSML Value ID that points to a List<StringW>*",
            "possibleValues": [
                "segmentedTexts", "tabs"
            ]
        },
        {
            "name": "BSMLValue ID (Il2CppObject*)",
            "description": "A BSML Value ID that points to a Il2CppObject*",
            "possibleValues": [
                "hostForList", "hostForModal"
            ]
        },
        {
            "name": "BSMLValue ID (bool)",
            "description": "A BSML Value ID that points to a bool",
            "possibleValues": [
                "makeModal", "makeStringSetting"
            ]
        },
        {
            "name": "BSMLValue ID (Transform*)",
            "description": "A BSML Value ID that points to a Transform*",
            "possibleValues": [
                "vanillaSettingsTransorm", "transformToReparent"
            ]
        },
        {
            "name": "BSMLValue ID (List<Transform*>*)",
            "description": "A BSML Value ID that points to a List<Transform*>*",
            "possibleValues": [
                "vanillaTransforms", "transformsToReparent"
            ]
        },
        {
            "name": "BSMLAction",
            "description": "A BSMLAction is any C# method on your host object, or any special id#method from the components, like list#PageUp",
            "possibleValues": [
                "DECLARE_INSTANCE_METHOD(void, OnLengthChanged, float value);", "DECLARE_INSTANCE_METHOD(void, OnSelectCell, HMUI::TableView* tableView, int idx);"
            ]
        },
        {
            "name": "BSMLAction ID (void(T))",
            "description": "A BSML Action ID or Methodname that would run a void (T) method where T is related to the tag you are using",
            "possibleValues": [
                "ChangeSaberLength", "OnChangeColor", "UpdateTextureList"
            ]
        },
        {
            "name": "BSMLAction ID (void(void))",
            "description": "A BSML Action ID or Methodname that would run a void (void) method",
            "possibleValues": [
                "ClickProfileImage", "ClickApplyButton", "list#PageUp"
            ]
        },
        {
            "name": "BSMLAction ID (void(TableView*, int))",
            "description": "A BSML Action ID or Methodname that would run a void (TableView*, int) method",
            "possibleValues": [
                "CellWasSelected"
            ]
        },
        {
            "name": "BSMLAction ID (void(Color))",
            "description": "A BSML Action ID or Methodname that would run a void (Color) method",
            "possibleValues": [
                "ColorChanged", "ColorSelected"
            ]
        },
        {
            "name": "BSMLAction ID (void(StringW))",
            "description": "A BSML Action ID or Methodname that would run a void (StringW) method",
            "possibleValues": [
                "EnterUser", "SearchForSongHash"
            ]
        },
        {
            "name": "BSMLAction ID (void(SegmentedControl*, int))",
            "description": "A BSML Action ID or Methodname that would run a void (SegmentedControl*, int) method",
            "possibleValues": [
                "SegmentSelected", "SelectedTab"
            ]
        }
    ]
}